// Dane tabeli listOfPrivateOrders
let conf = {
    // Obiekt opisujący filter ludzików
    thePeopleFilterHeader: {content:'serverSelectFilter', options: []},
    theUserId: globalAppData.loggedInUser.id, // id użytkownika, którego zamówienia chcemy wyświetlić
}

//Definicja kolumn tabeli
let kolumny = [
    { id:"index", header:"", sort:"int", adjust:true },
    { id:"WebixPrivateOrder_id", header:"id", adjust:true },    
    { id: "WebixCustomer_name", header: "Klient",  fillspace:true },                
    { id: "WebixPrivateOrder_ileKart", header: "<span class='webix_icon fa-credit-card'></span>",  adjust: true  }, 
    { id: "WebixPrivateOrderOwner_name", header: [ conf.thePeopleFilterHeader ] , width:108 },        
    { id: "WebixPrivateOrder_stop_day", header:"Termin", adjust: true }        
];

// kontrolery zdarzeń dla listOfPrivateOrders

let onBeforeFilterHandler = function() {            
    conf.theUserId = this.getFilter("WebixPrivateOrderOwner_name").value;        
}

/**    
 * Problem: przy załadowaniu strony mamy filtr ustawiony na "Wszyscy", a ładują się dane dla
 * zalogowanego użytkownika (tak jak zresztą chcemy). Wykorzystujemy zdarzenie 'onAfterLoad',
 * by to skorygować. Warunek jest po to by ta korekcja zachodziła tylko przy pierwszej inicjalizacji
 * (tylko wtedy warunek jest spełniony). Być może istnieje lepszy sposób ustawienia filtra czy coś.
 */
let onAfterLoadHandler = function(){           
    if( this.getFilter("WebixPrivateOrderOwner_name").value != conf.theUserId ) {                
        this.getFilter("WebixPrivateOrderOwner_name").value = conf.theUserId;
    }
    // po zmianie filtra (wybrany inny handlowiec), czyścimy listę kart i chowamy tabelkę
    $$(listOfCards.id).clearAll(true);
    $$(listOfCards.id).hide();
    
    // czyscimy component ze szczegółami zamówienia    
    $$(theOrderDetail.id).define("template", "");
    $$(theOrderDetail.id).refresh();
}

let onAfterSelectHandler = function(id){ 
        
   $$(listOfCards.id).show();
   // czyścimy listę kart, by nowe zastąpiły a nie dołączały się
   $$(listOfCards.id).clearAll(true);

    // Przygotuj prawidłowy url ( z id zamówienia w bazie)
    let url =   "webixOrders/getOneOrderLight/" +                
                $$(listOfPrivateOrders.id).getItem(id).WebixPrivateOrder_id + // <= id tego zamówienia w bazie SKP
                ".json";
    // pobierz świeże dane dot. tego zamówienia
    webix.ajax(url).then(function(data){   
        let dane = data.json();  //console.log(dane);
        if( dane.WebixOrder_ileKart ) { // Jeżeli są jakieś karty                                        
            $$(listOfCards.id).parse(dane.WebixCard); // karty tego zamówienia
        }
        /* Tworzymy template ze szczegółami zamówienia (bo nie hcemy by nam się cokolwiek wyświetlało,
            jak nie ma danych) */        
        $$(theOrderDetail.id).define("template", globalAppData.template.theOrderDetail);
        $$(theOrderDetail.id).parse({
            id: dane.WebixOrder_id,
            termin: dane.WebixOrder_stop_day
        });
    });                               
}

let privateOrdersUrlHandler = function(){ // Dokumentacja: https://docs.webix.com/desktop__server_customload.html
    let url = "webixPrivateOrders/getTheOrders/" + conf.theUserId + ".json";
    return webix.ajax(url).then(function(data){
        let dane = data.json();                
        // Lidziki aktualnie mający prywatne zamówienia
        conf.thePeopleFilterHeader.options = dane.peopleHavingPrivs;
        return dane.records;  // w records mamy faktyczne dane                            
    });
}

let listOfPrivateOrders = {
    id: "listOfPrivateOrders",
    view:"datatable",
    select: true, // umożliwia selekcję
    gravity: 1.7,    
    //theUserId: globalAppData.loggedInUser.id, // id użytkownika, którego zamówienia chcemy wyświetlić
    columns: kolumny,
    scheme: {
        $init:function(obj){ obj.index = this.count(); }
    },    
    url: privateOrdersUrlHandler,
    on: {
        'onBeforeFilter': onBeforeFilterHandler,      
        'onAfterLoad': onAfterLoadHandler,
        'onAfterSelect': onAfterSelectHandler
    }
}

let listOfCards = {
    id: "listOfCards",
    view: "datatable",    hidden: true,
    //gravity: 0.5,    
    columns: [
        { id:"index", header:"", sort:"int", width:35 },
        { id:"id", header:"id", width:60 },
        { id:"name", header:"Nazwa karty", fillspace:true },
    ],
    scheme:{
        $init:function(obj){ obj.index = this.count(); }
    }
};

let theOrderDetail = {
    id: "theOrderDetail",
    view: "template",
    css: "theOrderDetail", // na razie nie używam - tak testowo
    // Zaczynamy bez zdefiniowanej template, bedzie uaktualniona, po kliknieciu w rekord        
    gravity: 1
}

let testContent1 = [
    {
        view: "button",
        label: "NAPZRÓD !!!",                         
        //width: 120,
        on: {
            'onItemClick': function(){
                //console.log("kliknęli!");
                $$(manageAddingQuickOrder.id).show();
            }
        }          
     },
     {template: "Zarządzanie prywatnymi zamówieniami"}
];

let guzik = { 
    view: "button",
    type: "icon",
    icon: "bars",
    width: 28,
    align: "center", // nie działa, więc chyba nie jest od tego
    //css: "app_button",    
    click: function(){ $$(manageAddingQuickOrder.id).show(); }
    
}

let managePrivateOrders = {
    id: "managePrivateOrders",
    padding:35, type:"space",
    //rows: testContent1    
    css: "moj-naglowek",
    cols: [
        listOfPrivateOrders,
        {gravity: 0.01},// taki spacer  
        {
            rows: [
                //{ type: 'header', template: '<span>Hau, Miau</span>'},
                {
                    view: "toolbar",
                    responsive: true,
                    elements: [
                        {},
                        guzik                        
                    ]
                },
                theOrderDetail,
                listOfCards
            ]                    
        }
    ]
}

let testContent2 = [
    {            
        view: "button",
        label: "W TYŁ !!!",                         
        //width: 120,
        on: {
            'onItemClick': function(){
                //console.log("kliknęli 2!");
                $$(managePrivateOrders.id).show();
            }
        }       
     },
     {template: "Zarządzanie dodawaniem nowego zamówienia"}
];

let manageAddingQuickOrder = {
    id: "manageAddingQuickOrder",
    padding:35, type:"space",
    rows: testContent2  
}

let listOfCustomers = { 
    id: "listOfCustomers",
    view:"datatable",
    select: true,
    css: "list-of-customers",
    gravity: 1.3,    
    columns: [
        { id:"index", header:"", sort:"int", width:35, css:{'text-align':'right'} },
        { id:"WebixCustomer_id", header:"id", width:53, css:{'text-align':'right'} },
        { id:"WebixCustomer_name", header:[ {content:"serverFilter"}], fillspace:true }, 
        { id:"WebixCustomerRealOwner_name", header: [ {content:"serverSelectFilter", options: globalAppData.customerOwners }], width:108}
    ],
    scheme:{
        $init:function(obj){ obj.index = this.count(); }
    }, 
    //globalAppData.config.customersAddOrder
    postData: { // początkowe parametry do zapytania do serwera
        fraza: '',
        realOwnerId: globalAppData.loggedInUser.id
    },
    url: function(){
        let url = globalAppData.config.customersAddOrder;                
        if( globalAppData.loggedInUser.id == listOfCustomers.postData.realOwnerId && loggedUserInHasNoAnyCustomer() ) {
            listOfCustomers.postData.realOwnerId = 0;
        }
        return webix.ajax().post(url, listOfCustomers.postData).then(function(data) {
            let dane = data.json();                            
            return dane.records;  // w records mamy faktyczne dane                            
        });
    },
    on: { // Pobieramy zawartości filtrów, dzięki czemu Webix wykona zapytanie z odpowiednimi parametrami
        'onBeforeFilter': function() {            
            listOfCustomers.postData.realOwnerId = this.getFilter("WebixCustomerRealOwner_name").value;
            listOfCustomers.postData.fraza = this.getFilter("WebixCustomer_name").value;
        },
        // na wzór privateOrders        
        'onAfterLoad': function(){
            if( this.getFilter("WebixCustomerRealOwner_name").value != listOfCustomers.postData.realOwnerId ) {                
                this.getFilter("WebixCustomerRealOwner_name").value = listOfCustomers.postData.realOwnerId;
            }
        },
        /**
            Po kliknięciu w jakiegoś klienta na liscie, chcemy wyświetlić formularz do dodwania szybkiego
            zamówienia */
        'onAfterSelect': function(id){ 
            // Przemaluj komponent/y                  
            //webix.message("kliknięte!");            
            $$("customerName").define(customerName);  // nie musimy refresh, bo pozniej parse załatwi sprawę
            $$("addOrderNaglowek").show();            
            $$("addOrderAllTheRest_").hide();
            $$("addOrderAllTheRest").show();
            

            // id klikniętego klienta w bazie
            let theCustomerId = $$(listOfCustomers.id).getItem(id).WebixCustomer_id; 
            //console.log(theCustomerId);
            let url = globalAppData.config.justOneCustomerData + theCustomerId + ".json";

            // pobierz świeże dane dot. tego klienta
            webix.ajax(url).then(function(data){   
                let dane = data.json();                  
                //console.log(dane);
                $$("customerName").parse(dane);
                $$(formularz.id).setValues({
                    email: dane.WebixCustomer_email
                });
            });            
        }
    }
}

/**
    Sprawdzamy, czy zalogowany użytkownik ma pod opieką klientów */
function loggedUserInHasNoAnyCustomer() {
    let i;
    for (i = 0; i < globalAppData.customerOwners.length; i++) { 
        if( globalAppData.customerOwners[i].id == globalAppData.loggedInUser.id ) {
            return false;
        }
    }
    return true;    
}



//Top toolbar

let userInfo = { 
    view:"button", type:"icon", icon:"user",
    label: globalAppData.loggedInUser.name, // Tu leci Imię zalogowanego użytkownika
    width: 110, id:'userInfoToolbar',
    css:'kwa-mia-hau',    // w celach testowych
    //click: logoutHandler  <= w taki sposób, jeżeli chcemy użyć osobnej funkcji
    click: function (){ window.open(globalAppData.config.logoutUrl, "_self"); }
};
// takie testowe było { view: "button", type: "icon", value: "Zosia", width: 65, css: "app_button", icon: "user-o",  badge:"Darek"};

let mainToolbar = {
    responsive: true,
    view: "toolbar", padding:3,
    elements: [
        /*
        { view: "button", type: "icon", icon: "bars",
            width: 37, align: "left", css: "app_button", click: function(){
                $$("lewy-sidebar").toggle();
            }
        },
        */
        { view: "label", label: " "},
        {},
        userInfo
        //,{ view: "button", type: "icon", width: 45, css: "app_button", icon: "envelope-o",  badge:4},
        //{ view: "button", type: "icon", width: 45, css: "app_button", icon: "bell-o",  badge:10}
    ]
};







let menu_data = [
    {id: "side-klienci", icon: "address-book-o", value: "Klienci",  data:[
        { id: "side-klienci-list", value: '<i class="fa fa-list" aria-hidden="true"></i> Lista' },
        { id: "side-klienci-add", value: '<i class="fa fa-plus" aria-hidden="true"></i> Dodaj'}
    ]},
    {id: "side-karty", icon: "credit-card", value:"Karty", data:[
        { id: "side-karty-list", value: '<i class="fa fa-list" aria-hidden="true"></i> Lista'},
        { id: "side-karty-add", value: '<i class="fa fa-plus" aria-hidden="true"></i> Dodaj'}
    ]},
    {id: "side-handlowe", icon: "handshake-o", value:"Handlowe", data:[
        { id: "side-handlowe-list", value: '<i class="fa fa-list" aria-hidden="true"></i> Lista'},
        { id: "side-handlowe-add", value: '<i class="fa fa-plus" aria-hidden="true"></i> Dodaj'}
    ]},
    {id: "side-produkcyjne", icon: "industry", value:"Produkcyjne", data:[
        { id: "side-produkcyjne-list", value: '<i class="fa fa-list" aria-hidden="true"></i> Lista'},
        { id: "side-produkcyjne-add", value: '<i class="fa fa-plus" aria-hidden="true"></i> Dodaj'}
    ]}    
];

let leftSidebar = {
    view: "sidebar",
    id: "lewy-sidebar",
    data: menu_data,
    collapsed: true,
    on: {
            onAfterSelect: function(id){
                
                let where, act=true;
                switch(id) {
                    case "side-klienci-list":
                        where = "customers";
                        break;
                    case "side-klienci-add":
                        where = "customers/add";
                        break;
                    case "side-karty-list":
                        where = "cards";
                        break;
                    case "side-karty-add":
                        where = "cards/add";
                        break;
                    case "side-handlowe-list":
                        where = "orders";
                        break;
                    case "side-handlowe-add":
                        where = "orders/add";
                        break;
                    case "side-produkcyjne-list":
                        where = "jobs";
                        break;
                    case "side-produkcyjne-add":
                        where = "jobs/add";
                        break;
                    default:
                        act = false;
                }
                if( act ) {
                    window.open(where, "_self");
                }                
            }
    }
};
/*
click:function(){
    window.open("<a target='_blank' href='http://docs.webix.com'>Webix Docs</a>");
}
*/

/* Ikony zagnieżdżone też działają, ale jak sidebar nie jest collapsed

https://snippet.webix.com/z60bmqjk

var menu_data_multi  = [
    { id: "structure", icon: "columns", value:"Structuring", data:[
      { id: "layouts", icon:"circle", value:"Layouts", data:[
        { id: "layout", icon:"circle-o", value: "Layout"},
        { id: "flexlayout", icon:"circle-o", value: "Flex Layout"},
        { id:"strict", icon:"circle-o", value:"Precise Positioning", data:[
          { id: "gridlayout", icon:"circle-o", value: "Grid Layoot"},
          { id: "dashboard",  icon:"circle-o", value: "Dashboard"},
          { id: "abslayout", icon:"circle-o", value: "Abs Layout"}
        ]},
        { id: "datalayouts", icon:"circle-o", value:"Data Layouts",  data:[
          { id: "datalayout", icon:"circle-o", value: "Data Layout"},
          { id: "flexdatalayout",  icon:"circle-o", value: "Flex Data Layout"},
        ]}
      ]},
      {id: "multiviews", icon:"circle", value:"Multiviews", data:[
        { id: "multiview", icon:"circle-o", value: "MultiView"},
        { id: "tabview",  icon:"circle-o", value: "TabView"},
        { id: "accordion",  icon:"circle-o", value: "Accordion"},
        { id: "carousel", icon:"circle-o", value: "Casousel"}
      ]}
    ]},
    {id: "tools", icon: "calendar-o", value:"Tools", data:[
      { id: "kanban", icon:"circle", value: "Kanban Board"},
      { id: "pivot", icon:"circle", value: "Pivot Chart"},
      { id: "scheduler", icon:"circle", value: "Calendar"}
    ]},
    {id: "forms", icon: "pencil-square-o", value:"Forms",  data:[
      {id: "buttons", icon:"circle", value: "Buttons", data:[
        {id: "button", icon:"circle-o", value: "Buttons"},
        {id: "segmented", icon:"circle-o", value: "Segmented"},
        {id: "toggle", icon:"circle-o", value: "Toggle"},
      ]},
      { id:"texts", icon:"circle", value:"Text Fields", data:[
        { id: "text", icon:"circle-o", value: "Text"},
        { id: "textarea", icon:"circle-o", value: "Textarea"},
        { id: "richtext", icon:"circle-o", value: "RichText"}
      ]},
      { id:"selects", icon:"circle", value:"Selectors", data:[
        { id:"single", icon:"circle-o", value:"Single value", data:[
          { id: "combo", icon:"circle-o", value: "Combo"},
          { id: "richselect", icon:"circle-o", value: "RichSelect"},
          { id: "select", icon:"circle-o", value: "Select"}
        ]},
        { id:"multi", icon:"circle-o", value:"Multiple values", data:[
          { id: "multicombo", icon:"circle-o", value: "MultiCombo"},
          { id: "multiselect", icon:"circle-o", value: "MultiSelect"}
        ]}
      ]}
    ]},
    {id: "demo", icon: "book", value:"Documentation"}
  ];
*/

// Tu po nowemu cała zawartość
let animacja = {
    a: { direction:"top"},
    b: { type:"flip"},
    c: { type:"flip", subtype:"vertical"}, 
    d: {subtype:"out"},    
    e: {subtype:"in"},
    f: false 
}

let content = {
    id: "content",    
    animate: animacja.d
    ,cells: [
        managePrivateOrders,
        manageAddingQuickOrder
    ]
}

//@koala-prepend "content/orders/privateOrders/conf.js"
//@koala-prepend "content/orders/privateOrders/eventsHandlers.js",
//@koala-prepend "content/orders/privateOrders/listOfPrivateOrders.js",
//@koala-prepend "content/orders/theOrderDetail/listOfCards.js",
//@koala-prepend "content/orders/theOrderDetail/theOrderDetail.js",
//@koala-prepend "content/orders/managePrivateOrders.js",
//@koala-prepend "content/orders/manageAddingQuickOrder.js",    
//@koala-prepend "content/customers/listOfCustomers.js",    
//@koala-prepend "layout/mainToolbar.js",
//@koala-prepend "layout/leftSidebar.js",                
//@koala-prepend "layout/content.js"

console.log("app.js");